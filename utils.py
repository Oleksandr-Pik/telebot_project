import os
import json
from config import bot
from functions import *
from dotenv import load_dotenv
from currency_converter import CurrencyConverter
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv()
WEATHER_API = os.environ.get("WEATHER_API")
amounts = {}
correct_numbers = {}
currency = CurrencyConverter()

text_info = """–ë–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –Ω–∞ –±–∞–∑—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ pyTelegramBotAPI, —â–æ–± –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –≤–∞–º!\n
–î–∞–Ω–∏–π –±–æ—Ç –º–æ–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –≤–∞–º –≤ —á–∞—Ç—ñ üí¨, 
üìñ —Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ –∫–Ω–∏–≥–∏, üéµ –º—É–∑–∏–∫—É, 
üïπÔ∏è –≥—Ä–∞—Ç–∏ –∑ –≤–∞–º–∏ –≤ —ñ–≥—Ä–∏ /game, 
ü§£ —Ä–æ–∑–∫–∞–∑–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç,
üïì –ø—ñ–¥–∫–∞–∑–∞—Ç–∏ —á–∞—Å, 
–∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100,
ü™ô –∑—ñ–º—ñ—Ç—É–≤–∞—Ç–∏ –ø—ñ–¥–∫–∏–¥–∞–Ω–Ω—è –º–æ–Ω–µ—Ç–∏,  
üíµ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å –¥–æ–ª–∞—Ä–∞üí≤,
–∞–±–æ –∂ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–º –≤–∞–ª—é—Ç /currency,
‚òÅÔ∏è üå°Ô∏è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–≥–æ–¥—É /weather.
"""


def text_commands(user_text, message):
    for phrase in data:
        for input_words in phrase["input"]:
            if input_words in user_text.lower():
                output = random.choice(phrase["output"])
                function_name = phrase.get("function")
                if function_name:
                    func = globals().get(function_name)
                    if func:
                        output_func = func(user_text)
                        for key in output_func.keys():
                            output = output.replace(f"[{key}]", str(output_func[key]))

                bot.reply_to(message, output)
                return
    variants = [
        "–Ø —Ç–µ–±–µ –Ω–µ —Ä–æ–∑—É–º—ñ—é",
        "–ú–µ–Ω–µ —â–µ –Ω–µ –Ω–∞–≤—á–∏–ª–∏ —Ü—å–æ–º—É",
        "–Ø —â–µ –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É –∫–æ–º–∞–Ω–¥—É",
        "–¶–µ –¥—É–∂–µ —Ü—ñ–∫–∞–≤–æ, –∞–ª–µ —è –Ω–∞–≤—ñ—Ç—å –Ω–µ –∑–Ω–∞—é —â–æ —Ç–æ–±—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
        "–•–º...\n–°–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç–∏ —â–æ—Å—å —ñ–Ω—à–µ"
    ]
    bot.reply_to(message, random.choice(variants))
    return


def processing_game(message: Message):
    text = message.text
    bot.reply_to(message, f"–í–∏ —Å–∫–∞–∑–∞–ª–∏: {message.text}")
    correct_number = correct_numbers[message.chat.id]
    if text.isdigit():
        number_user = int(text)
        if number_user == correct_number:
            bot.reply_to(message, "–í—ñ—Ç–∞—é —Ç–∏ –≤–≥–∞–¥–∞–≤!\n–ú–æ–∂–µ–º–æ –∑—ñ–≥—Ä–∞—Ç–∏ —â–µ, —è–∫—â–æ –∑–∞—Ö–æ—á–µ—à. –¢–∏ –≤–∂–µ –∑–Ω–∞—î—à —è–∫ –ø–æ—á–∞—Ç–∏ –≥—Ä—É.")
            return
        elif number_user < correct_number:
            bot.reply_to(message, f"–°–ø—Ä–æ–±—É–π —â–µ, –º–æ—î —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ –∑–∞ {number_user}")
            bot.register_next_step_handler(message, processing_game)
        elif number_user > correct_number:
            bot.reply_to(message, f"–°–ø—Ä–æ–±—É–π —â–µ, –º–æ—î —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞ {number_user}")
            bot.register_next_step_handler(message, processing_game)
    elif "–∫—ñ–Ω–µ—Ü—å" in text:
        bot.reply_to(message,
                     "–°—É–º–Ω–æ, —â–æ —Ç–∏ –Ω–µ —Ö–æ—á–µ—à –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.\n–ê–ª–µ –º–∏ –º–æ–∂–µ–º–æ –∑—ñ–≥—Ä–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ —Ä–∑—É, —è–∫—â–æ –∑–∞—Ö–æ—á–µ—à. –¢–∏ –≤–∂–µ –∑–Ω–∞—î—à —è–∫ –ø–æ—á–∞—Ç–∏ –≥—Ä—É.")
        return
    else:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ —ñ –Ω—ñ—á–æ–≥–æ –∑–∞–π–≤–æ–≥–æ")
        bot.register_next_step_handler(message, processing_game)


def get_weather(message: Message):
    bot.reply_to(message, f"–í–∏ —Å–∫–∞–∑–∞–ª–∏: {message.text}\n–í–∂–µ –ø–æ—Å–∏–ª–∞—é –∑–∞–ø–∏—Ç, —Ç—Ä–µ–±–∞ —Ç—Ä–æ—Ö–∏ –ø–æ—á–µ–∫–∞—Ç–∏...")
    city = message.text.strip().lower()
    try:
        res = requests.get(f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API}&units=metric")
        data = json.loads(res.text)
        bot.reply_to(message,
                     f"–ó–∞—Ä–∞–∑ –ø–æ–≥–æ–¥–∞:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è üå°Ô∏è {data["main"]["temp"]}‚ÑÉ\n–í–æ–ª–æ–≥—ñ—Å—Ç—å {data["main"]["humidity"]}%\n–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É üí® {data["wind"]["speed"]}–º/—Å\n{data["weather"][0]["description"]}")
    except KeyError:
        bot.reply_to(message, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –≤–∫–∞–∑–∞—Ç–∏ –º—ñ—Å—Ç–æ.")
        bot.register_next_step_handler(message, get_weather)


def currency_exchange(message: Message):
    try:
        amounts[message.chat.id] = int(message.text.strip())
        amount = amounts[message.chat.id]
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç, –≤–∫–∞–∂—ñ—Ç—å —Å—É–º—É")
        bot.register_next_step_handler(message, currency_exchange)
        return
    if amount > 0:
        markup = InlineKeyboardMarkup(row_width=2)
        btn1 = InlineKeyboardButton("USD/EUR", callback_data="USD/EUR")
        btn2 = InlineKeyboardButton("EUR/USD", callback_data="EUR/USD")
        btn3 = InlineKeyboardButton("USD/GBP", callback_data="USD/GBP")
        btn4 = InlineKeyboardButton("–Ü–Ω—à–∞ –ø–∞—Ä–∞", callback_data="else")
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É –≤–∞–ª—é—Ç", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ß–∏—Å–ª–æ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –∑–∞ 0.\n–í–∫–∞–∂—ñ—Ç—å —Å—É–º—É")
        bot.register_next_step_handler(message, currency_exchange)


def my_currency_exchange(message: Message):
    try:
        amount = amounts[message.chat.id]
        values = message.text.upper().split("/")
        res = currency.convert(amount, values[0], values[1])
        bot.send_message(message.chat.id, f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ: {round(res, 2)}")
        return
    except Exception:
        bot.send_message(message.chat.id, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.\n–í–∫–∞–∂—ñ—Ç—å —â–µ —Ä–∞–∑ –ø–∞—Ä—É –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ /")
        bot.register_next_step_handler(message, my_currency_exchange)


def load_speech():
    with open("speech.json", "r", encoding="UTF-8") as file:
        data = json.load(file)
    return data


data = load_speech()
